- implement await/resume

- implement direct-dispatch interp for CacheOps (and goto-based control flow
  for NextIC / error / next-op / done)
  - may require #define of entire body

- pass all jit-tests
  - work out issue with EnvironmentIter::settle and assertions on GC (try a
    debug build running markdown.js)

- implement CallScriptedFunction for ctors

- implement as many CacheIR ops as needed to completely cover markdown renderer
- opts:
  - "next-op fusion": cover a few likely next ops with if-goto
    - for bonus points, make these edges acyclic; then the wasm compilation can
      handle it too without any loop-backedges
  - cover a few common cases (e.g. int32 compare/arith) without doing ICs at all
  - cache unchanging values (stubInfo?) as needed

- weval the IC interp and PBL interp loops
  - memory-rename the stack and icVals too

- OSR (on-stack replacement)

- on wasm and other 32-bit platforms: make StackVal properly push
  32-bit values? stick to 64-bit layout for BaselineFrame,
  JitFrameLayout, etc?
